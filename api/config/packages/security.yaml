security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: "auto"

    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        users_in_memory: { memory: null }
        users:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            stateless: true
            provider: users
            json_login:
                check_path: auth # The name in routes.yaml is enough for mapping
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            jwt: ~

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # PRODUCTION SPECIFIC
        - { path: ^/, roles: PUBLIC_ACCESS } # Allows accessing the Swagger UI
        - { path: ^/admin, roles: PUBLIC_ACCESS } # Allows accessing the Swagger UI
        - { path: ^/.well-known/mercure/ui/, roles: PUBLIC_ACCESS } # Allows accessing the Swagger UI
        - { path: ^/docs, roles: PUBLIC_ACCESS } # Allows accessing the Swagger UI
        # GLOBAL SECURITY
        # Appointments
        - {
              path: ^/appointments$,
              roles: IS_AUTHENTICATED_FULLY,
              methods: [POST, GET, DELETE],
          }
        # Token & login
        - { path: ^/auth, roles: PUBLIC_ACCESS }
        # Documents
        - {
              path: ^/documents,
              roles: IS_AUTHENTICATED_FULLY,
              methods: [POST, PATCH, PUT, GET],
          }
        # FavoriteAd
        - {
              path: ^/favorite_ads,
              roles: IS_AUTHENTICATED_FULLY,
              methods: [POST, GET],
          }
        # Housing Properties
        - {
              path: ^/housing_properties,
              roles: IS_AUTHENTICATED_FULLY,
              methods: [POST, PATCH],
          }
        - { path: ^/housing_properties, roles: PUBLIC_ACCESS, methods: [GET] }
        # Housings
        - {
              path: ^/housings,
              roles: IS_AUTHENTICATED_FULLY,
              methods: [POST, PATCH],
          }
        - { path: ^/housings, roles: PUBLIC_ACCESS, methods: [GET] }
        # Messages
        - { path: ^/messages, roles: IS_AUTHENTICATED_FULLY, methods: [POST] }
        # Payments
        - { path: ^/payments, roles: IS_AUTHENTICATED_FULLY, methods: [POST] }
        # Real Estate Ads
        - {
              path: ^/real_estate_ads,
              roles: IS_AUTHENTICATED_FULLY,
              methods: [POST, PATCH],
          }
        - { path: ^/real_estate_ads, roles: PUBLIC_ACCESS, methods: [GET] }
        # UserContracts
        - {
              path: ^/user_contracts,
              roles: IS_AUTHENTICATED_FULLY,
              methods: [POST],
          }
        # Users
        - {
              path: ^/users,
              roles: IS_AUTHENTICATED_FULLY,
              methods: [GET, PATCH],
          }
        - { path: ^/users, roles: PUBLIC_ACCESS, methods: [POST] }
        - {
              path: ^/users/reset-password,
              roles: PUBLIC_ACCESS,
              methods: [POST],
          }
        - {
              path: ^/users/reset-password/email,
              roles: PUBLIC_ACCESS,
              methods: [POST],
          }
        - { path: ^/users/verify/$, roles: PUBLIC_ACCESS, methods: [POST] }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
